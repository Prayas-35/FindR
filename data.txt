How to Start Coding: The Ultimate Guide for Beginner Programmers
Download Now: Free HTML & CSS Coding Templates
Jamie Juviler
Jamie Juviler
Published: July 09, 2024

As a HubSpot Technical Blog Writer with a background in coding, I've personally discovered that coding is one of the most valuable skills you can build. 

how to start Coding for beginners; students coding on a computer.
Download Now: 50 Code Templates [Free Snippets]
If you’re searching for “how to learn coding,” it might be because you want to advance your career or develop other skills in the computer programming world. And believe me, if I can dive into this world, so can you.

As a matter of fact, anyone can learn to code with time, dedication, and internet access. If you’re reading this, that includes you.  My journey into coding, though challenging, has been one of the most rewarding experiences of my professional life, and I'm thrilled to share these insights with you.

Table of Contents
What is coding?
Why learn to code?
How to Start Coding
Coding vs. Programming
Programming Languages
Tips for Coding for Beginners
Our Favorite Coding Resources
What is coding?
Coding is the process of using programming languages to give instructions to a computer. These instructions power the websites, software, and applications people use every day.

Why learn to code?
Before diving into your first lesson, I suggest that you think about why you want to code in the first place.

In my opinion, this will help you determine which programming language you learn first, what sorts of projects you want to complete, and ultimately, what you want to make of your skills.


50 Free Coding Templates
Free code snippet templates for HTML, CSS, and JavaScript -- Plus access to GitHub.

Navigation Menus & Breadcrumbs Templates
Button Transition Templates
CSS Effects Templates
And more!
Get Your Free Templates
Learn more
Coding helps build professional skills.
In my journey, I've seen how coding opens doors to numerous opportunities, not just in tech but in various industries. It's a skill that empowers you to create, innovate, and solve problems in new ways.

As technology continues to weave into our daily lives, coding skills will become more desired among candidates — according to job board Indeed.com, several of the most in-demand skills fall under computing.

If you’re looking to make a career pivot into tech or to switch to a more technical role within your field, knowing at least one relevant programming language is a must.

This doesn’t just apply to developers, though. Web designers should know HTML, CSS, and JavaScript. Project managers should know the inner workings of the tools they help craft.

Even if you run a simple WordPress website, familiarizing yourself with front-end languages and some PHP goes a long way.

Even if you’re not pursuing a strictly technical role, coding experience is an asset. It shows technical know-how, the ability to grasp abstract concepts, and that you can solve complex problems.

Finally, coding knowledge enables you to take up freelance work or a full-time career.

Coding can help you earn more.
The average entry-level salary in the U.S. is $40,153 in 2022. But the average starting salary for a programmer is more than twice as much, at $85,293.

There's no denying the financial advantages of coding skills. The tech industry is known for its lucrative salary packages, and as someone who transitioned into this field, the financial uplift was a significant motivator.

We mentioned earlier that there are differences between coders and programmers. As you continue to learn about coding, you may start to specialize. Many of the highest coding salaries come from the ability to offer your skills in a specific type of coding.

For example, as you continue to code, you may become a developer. Besides writing code, developers also debug software and work with source code. Developers usually specialize in a specific programming language.

Developers often earn higher salaries than programmers and have high projected job growth. According to the U.S. Bureau of Labor Statistics, jobs for developers should grow by 22% by 2030.

Coding lets you create things.
One of the coolest benefits of learning how to code is the ability to bring your ideas to life. Have a concept for a website, app, or computer game? Now, you can build it exactly how you want, then share it with the world.  I still remember the thrill of my first successful program—it was a simple task automation, but it felt like magic.

Whether you want to monetize your project, post it on an open-source platform like GitHub, or just make things as a hobby, you’ll have the knowledge and the tools to do so.

How to learn coding resource: GitHub

Image Source

It’s gratifying to know you can build programs that, until now, you’ve never fully understood. Plus, projects are essential to the learning and job-seeking process.

Coding can help you better understand the world around you.
Learning even just the basics of computer programming will help you understand the components of the growing technology landscape.

You’ll gain an entirely new perspective on the technologies in your life and an appreciation for how it all comes together.

Coding is fun.
It’s cheesy but true — for me, learning to code is a rewarding and enjoyable experience. Once I had the basics down and started on my own projects, the process felt less like learning and more like leisure. After all, if you’re not enjoying it, why pursue it as a career?

How to Start Coding
Figure out why you want to learn to code.
Choose which coding language you want to learn first.
Take online courses.
Watch video tutorials.
Read books and ebooks.
Use tools that make learning to code easier.
Check out how other people code.
Complete coding projects.
Find a mentor and a community.
Consider enrolling in a coding boot camp.
How to start coding graphic

Thanks to the internet, there’s never been a better time to learn to code. But the sheer volume of options can stall some new coders before they even begin.

1. Figure out why you want to learn to code.
It’s tempting to jump right in when you start coding. But if you don’t have an end goal, you may become frustrated and stop learning before you get to the fun.

So, before you start studying, I want you to think about why you want to know how to code. Think about the projects you want to complete, why this skill excites you, and what resources you have available.

For example, say you want to become a developer to earn more income for your family. Do you know where you want to work and what projects they need developers for? Are you ready to put in the time to learn to code, learn the right programming languages, and build projects that show you have what it takes?

Setting a broad goal like that is important but can be overwhelming. Instead, I suggest that you start with smaller, more specific goals. For example, say you want to build a mobile app for your friend who is training for a half-marathon one year from now.

This goal will:

Help you build the skills you need.
Give you a sense of which programming language to start with.
Set a deadline so you can manage your time while learning.

50 Free Coding Templates
Free code snippet templates for HTML, CSS, and JavaScript -- Plus access to GitHub.

Navigation Menus & Breadcrumbs Templates
Button Transition Templates
CSS Effects Templates
And more!
Get Your Free Templates
Learn more
2. Choose which coding language you want to learn first.
If you’re trying to figure out which programming language to start with, I want you to think about your long-term goals. Are you coding for fun or to advance at work? Do you have a flexible timeline, or do you need to finish a project in a hurry?

When I was in my beginning stages, I started with a language that doesn’t use data structures or algorithms. So, for me, HTML or CSS were great places to start. But languages like Java and Python are also great for beginners, and they have a wide range of applications.

It can sometimes take months to learn a programming language, so take some time to make this decision to make sure that your time is well spent.

3. Take online courses.
Learning to code no longer requires a classroom setting. Today, there are thousands of online programming courses that cover everything from basic HTML to data structures to complex algorithms.

Your first course should introduce the basics of a language and contain interactive modules and assignments to guide your learning.

For me, courses create a structure for learning, which is essential as concepts in computer science build on each other. An organized course keeps everything digestible and ensures you’re learning things in the correct order.

How to learn coding resource: freeCodeCamp

Image Source

Popular free course providers include:

freeCodeCamp
W3Schools
Scaler Topics
Harvard’s acclaimed Introduction to Computer Science course on edX and the CS50 YouTube channel
These options are great for determining early on whether you’re ready to invest the time to learn a particular language. Plenty of paid courses are available for a fraction of what in-person classes will cost you.

How to learn coding resource: Code Academy

Image Source

These choices cover a wide range of beginner, intermediate, and advanced CS topics:

Codecademy
Springboard
MIT’s Introduction to Computer Science and Programming Using Python
Some paid services offer free courses or trials if you want to get a feel for their teaching before you commit.

4. Watch video tutorials.
You’ve probably watched a YouTube tutorial or two — why not do the same for coding?

While online courses are your best bet for hands-on experience, online videos can supplement your learning and occupy your curiosity. My personal favorites include:

Crash Course Computer Science
Tom Scott’s The Basics
Both cover broader topics in computing.

5. Read books and ebooks.
Prefer an old-school approach? Pick up a book on your beginner language of choice. Books will introduce you to fundamental concepts and inform your coding.

Programming for beginners, HubSpot’s ebook entitled “The Beginner’s Guide to HTML & CSS for Marketers”

Learn HTML & CSS with this Free Ebook

Here are some established texts that I recommend for each beginner language.

HTML/CSS: The Beginner's Guide to HTML and CSS for Marketers
JavaScript: Eloquent JavaScript: A Modern Introduction to Programming
Python: Python Crash Course
C: C Programming Absolute Beginner's Guide
C++: C++ Primer
C#: C# 8.0 and .NET Core 3.0 – Modern cross-platform development: Build applications with C#
Java: Effective Java
PHP: Head First PHP & MySQL
Ruby: The Well-Grounded Rubyist
SQL: SQL in 10 minutes, Sams Teach Yourself
Swift: Swift Programming: The Big Nerd Ranch Guide
6. Use tools that make learning to code easier.
While it’s great to know that you don’t need any special tools to write code, there are tools that can help.

Code Editor
Text editors include features to make coding easier like color coding, auto-complete, find-and-replace, and dark mode.

In my experience, most professionals use a code editor. This tool can help you write clean code faster. Code editors are like text editors, but they have extra features that help you manage and edit your code like:

Syntax highlighting
Code lookup
Built-in terminal environment
Notepad++, Sublime Text, and Emacs are popular editors for beginners. VS Code is also a great option.

Console
You’ll also want to get to know your computer a little better. When you start coding you should learn how to navigate the console (also called a terminal). This is the text-based interface for your operating system.

The console lets you find files and execute commands on them more quickly than the standard graphical user interface (GUI). Familiarize yourself with how to use it, including the basic UNIX commands, since you’ll be doing things that aren’t possible in the GUI.

Project Management
Many projects start simple but get more complicated as the project goes on. Using a project management tool, you can share files, update timelines, and break out separate parts of coding projects. This makes it easier to keep track of side projects and extra files while sticking to your timeline.

Troubleshooting
As you work on your coding projects, you may run into bugs, roadblocks, and other challenges. This can be super frustrating. Rubber Duck Debugging may sound silly, but it can help you simplify your problem and find useful solutions.

7. Check out how other people code.
It’s easier for some people to edit someone else’s work than to create from a blank page. If this is you, a great way to learn how to code is to go through someone else’s code.

Checking out other programmers' code can inspire you and push your coding skills further. This approach will help you:

Better understand your own code.
Understand new code faster.
Give you tangible examples of quality coding.
How to learn coding resource: searchcode

Image Source

Start with a program or code file you like. If you’re unsure what code to start with, GitHub and searchcode are great starting points. Try to start with peer-reviewed code or open-source projects if you can.

If you know what the code does, choose one small section and work backward. This will help you understand the function of every line of code. It’s also a good idea to read the documentation. You can then see the ideas behind the code you’re reviewing.


50 Free Coding Templates
Free code snippet templates for HTML, CSS, and JavaScript -- Plus access to GitHub.

Navigation Menus & Breadcrumbs Templates
Button Transition Templates
CSS Effects Templates
And more!
Get Your Free Templates
Learn more
8. Complete coding projects.
You learn programming by doing — there’s no way around it. You can read up on all the concepts and syntax necessary to write functional code, but the ideas won’t fully materialize in your mind unless you put what you learn into practice. That’s where projects come in.

A project is any program (or website) built with your language of choice. When starting, keep projects short-term.

If you’re taking a course, you may be assigned projects designed to solidify a concept. There are also loads of beginner programming projects you can try independently. Some classic projects include:

A time converter, in which the user submits a number of seconds, and your program gives the equivalent in hours, minutes, days, etc.
A random number generator, which produces a random number between two values specified by the user.
A calculator, in which the user specifies their inputs and mathematical operation, and your program gives an output.
An address book, in which users can submit contact names, then search for contacts stored in your program.
An alphabetizer, in which the user offers a list of words, and your program sorts them in alphabetical order.
A hangman game, in which the user tries to guess a hidden word by inputting letters, and your game gives feedback for correct or incorrect guesses. When the user guesses all the letters to your word, they win.
A quick Google search will reveal even more mini-challenges that require applying your skills to real-world problems.

Benefits of Coding Projects
On top of practicing concepts, projects offer two more benefits to your learning.

First, they’ll keep you motivated. Projects help solidify the “why” behind your coding and set clear, tangible benchmarks for your progress. Each completed project means one more skill under your belt. As I was learning, this was very encouraging.

Second, coding projects, especially long-term ones, give you something to show for your work. It’s one thing to put “Python” on your resume — it’s another to show you built an entire website or application from scratch.

Projects are a must for entry-level programming jobs, as they prove competency in a given language.

How to Stay Motivated While You’re Coding
When embarking on longer-term projects, consider things you’re willing to invest time in. Whether it’s a personal website, a mobile application, or a desktop tool, you’ll hit speed bumps along the way. Choosing a project you truly care about ensures you follow through.

Another great way to stay engaged with coding projects is by freelancing. You don’t need to be an expert programmer to build a useful tool for someone. Reach out to a friend, family member, or local business in need of a tool or website — it’s a win-win.

9. Find a mentor and a community.
Having a friend or an online community to guide you can be invaluable to your learning.

First, I recommend finding a mentor. As you progress, you’ll probably encounter issues that, no matter how hard you try, you just can’t crack. This is where mentors can help.

A mentor doesn’t need to be an actual teacher — they can be anyone knowledgeable in your language. They should be able to explain difficult concepts and point you to solutions. An experienced mentor can help you follow coding practices not covered in tutorials and offer advice for navigating a career in tech.

You may also want to join a community. Look for local groups, networking events and meetups in your area, and hackathons where you can make in-person connections with other programmers.

Online developer communities are also a rich resource for beginners.

How to learn coding resource: Stack Overflow

Image Source

Be sure to check out:

Stack Overflow, a forum site for programming questions and discussion.
GitHub, a code repository for open-source projects with an active developer community.
Women Who Code, a nonprofit that organizes events, communities, and job postings for women pursuing careers in technology.
r/learnprogramming, a subreddit (a microsite on Reddit.com) for beginner coders.
10. Consider enrolling in a coding boot camp.
A coding boot camp is a short-term training program that packs a comprehensive coding curriculum into several months. These programs are fast-paced, immersive, and a launchpad for a development career.

Coding boot camps are intensive and expensive — not the kind of thing to dive into without any coding experience.

These programs are primarily for beginners who are set on a career in development and are ready to commit time, energy, and money to get the necessary skills quickly.

While grads tend to find employment in the tech industry, understand that this isn’t a guaranteed outcome. You’ll set aside a decent chunk of your year and savings for such a pursuit. Still, it’s difficult to top an in-person learning environment surrounded by peers and teachers as motivated as you are.

Coding vs. Programming
The terms coding and programming are often used interchangeably, but they don’t always mean the same thing. Both coding and programming mean writing instructions for a computer. But programming might also include algorithms and data structures. Generally, the term programming describes more advanced projects.

While you can code with just a computer and some time, some programming might need specialized software tools. Programming projects are usually bigger and more complex. They may need project management and a more solid knowledge base.

Programming Languages
Programming languages graphic

Coding requires knowledge of at least one coding language, a set of syntax and rules that computers can understand. There are hundreds of coding languages, each one unique in its purpose and what it can do.

When I first stepped into the world of coding, the array of programming languages seemed overwhelming. I began with HTML and CSS, and it was a transformative experience. Diving into HTML opened my eyes to the fundamental structure of web pages, while CSS unlocked the secrets of styling and design. These languages were the perfect starting point for a newbie like me, offering a hands-on introduction to the world of web development.

Programming languages give you a structure for the instructions you’re writing. This language looks like English, but not exactly. Programmers call the terms and grammar in a programming language syntax.


50 Free Coding Templates
Free code snippet templates for HTML, CSS, and JavaScript -- Plus access to GitHub.

Navigation Menus & Breadcrumbs Templates
Button Transition Templates
CSS Effects Templates
And more!
Get Your Free Templates
Learn more
Low-level languages like Assembly or Machine are easier for machines to read than humans, so they can be tough to learn. That said, a middle-level language like C++ is useful to know if you want to write:

Operating systems
Database systems
Image or video processing software
High-level languages are usually easier for beginners. Some focus more on structure, while others are more interactive and can perform more complex functions.

Below are some of the best languages for beginners. Try to get comfortable with just one language that aligns with your goals, then explore others if you’d like.

Don’t worry about choosing the wrong one, though. These languages share underlying concepts, so you can start with one and switch to another.

HTML
Coding for beginners programming language example: HTML

Image Source

Hypertext Markup Language, or HTML, is the foundation of the internet — it’s used to set the content of web pages. When you load a web page, you see an HTML document rendered by your browser.

If you’re unsure whether coding is your thing, HTML is the easiest language to sample.

This is because HTML isn’t technically a programming language — it doesn’t execute scripts, and you can’t build functional programs with it. Still, HTML is everywhere online, so if you want to understand the internet, you’ll first need to understand HTML.

Best for: Beginners eager to step into web development and understand the basics of web page creation.

CSS
How to learn coding programming language example: CSS

Image Source

You might be less familiar with HTML’s sibling language, CSS. HTML handles what content appears on a web page but doesn’t affect how that content looks.

This is where Cascading Style Sheets, or CSS, comes in. The CSS language handles the styling of HTML — it sets features like colors, sizing, fonts, and even entire page layouts. CSS is also not a programming language. It’s a set of rules applied to HTML.

HTML and CSS are almost always used together, so I recommended learning both. Otherwise, your web pages will look rather plain.

If you’re starting from square one, dive into HTML and CSS.
HTML and CSS are easy to learn largely because they don’t require you to think through the computational logic of programming languages.

Learning HTML and CSS can also feel less abstract than other languages since you see the results of your code quickly — simply create a .html file and open it in your browser. Or, open an existing website and use your inspect tool to peek at the underlying code.

New Call-to-action
But, if you want your web pages to do things, you’ll need...

JavaScript
Coding for beginners programming language example: JavaScript

Image Source

JavaScript is a programming language that turns static web pages into dynamic ones. It enables page elements to move, react to user actions like clicks, and handle any operation beyond simply existing on the page.

If you’re interested in web development and already have a feel for HTML and CSS, JavaScript is the next step.

Together, these three languages make up most of your web content. Plus, JavaScript code can be easily tested in your browser.

Pro Tip: Focus on mastering DOM manipulation and asynchronous programming in JavaScript to really bring your web pages to life.

Python
How to learn coding programming language example: Python

Image Source

Python is a popular programming language for beginners because of its user-friendly syntax and versatility.

Much of Python code reads like English, which helps beginners learn basic concepts like functions.

Python also has many code libraries. These are groups of pre-built functions that you can plug into your code instead of writing the functions out yourself. With Python, you can build many different types of programs. Many introductory courses also base their projects on this language.

What I like: Its extensive libraries and community support make Python a great choice for both beginners and experienced programmers.

python
C/C++
Coding for beginners programming language example: C++

C is another popular choice for introductory courses. It’s wordier than Python and often requires beginners to write more code to achieve the same things. This is more work but useful for understanding abstract concepts. With C, you’ll learn skills that can be applied to other, more succinct languages.

C++ is a successor to C. C++ syntax is similar to C with the addition of objects, a powerful variable type that makes programming sophisticated applications easier.

I recommend beginning with C, though, since there are fewer concepts to learn, all of which can be mapped to C++. It will also teach you the basics of function-oriented programming.

Best for: Those intrigued by system-level programming, game development, or applications where performance is critical.

C#
How to learn coding programming language example: C-sharp

Image Source

C#, also called C-sharp, is popular for developing video games, mobile and desktop apps, and enterprise software. C# shares a common source with C++, but while C++ and C have many overlaps, C# is more like Java.

C# is easy to learn, and there are many ways to use it. If you plan to use both C++ and C#, you may want to learn C++ first. This will make it easier to understand C# and can help speed up the learning process.

Java
Coding for beginners programming language example: Java

Image Source

Java (not to be confused with JavaScript) is a general-purpose object-oriented programming language. Like Python, Java’s syntax is easy to read and understand by human programmers — often, complex tasks can be handled by one command.

Java is popularly implemented in Android mobile applications. It’s another great base language with principles that can be intuitively applied to learning other languages.

Pro Tip: Pay close attention to understanding object-oriented programming when tackling Java, as it forms the core of its functionality.

HyperText Preprocessor (PHP)
How to learn coding programming language example: PHP

Image Source

PHP is a server-side, open-source programming language for developing web applications. It makes it easy to add dynamic information, like updated news stories, to websites.

You can also embed this language into HTML, which makes it easy to add functions to your website without needing external files. PHP is also great for database access, making it simple to access and store data.

Best for: Beginners who want to delve into the server-side aspect of web development.

Ruby
Coding for beginners programming language example: Ruby

Image Source

Ruby is a simple language that’s useful for creating automation tools, desktop applications, and rapid prototypes. There is also a popular framework for Ruby, often called Ruby on Rails.

Ruby is another open-source server-side programming language. Its framework also offers default structures for web pages, web services, and databases. This makes it a useful tool for developing web applications.

While this language is easy to read and write, it may not be the best choice for your first programming language. This is because it’s also quite flexible, so it easily accepts changes.

Flexibility is great when you’re first learning how to make a coding project go. But it can impact changes to your code as you maintain the project over time.

What I like: Ruby is an excellent choice for rapid application development due to its 'convention over configuration' philosophy.

SQL
Coding for beginners programming language example: SQL

Image Source

SQL is another useful language for beginners. You can use this language to update, store, and retrieve data from a database. It’s also the standard language for database management systems, according to the American National Standards Institute.

It’s different from the other programming languages since it’s technically a Query Language, so you won’t be building web pages with it.

It can take some time to learn SQL if you don’t already have some understanding of programming. That said, this language is popular in tech and with data professionals, so it has a lot of relevance in the workplace.

What I like: SQL is needed for projects that involves data storage and retrieval, making it a must-learn for web developers.

Swift
Coding for beginners programming language example: Swift

Image Source

If you’re learning to code to create projects for Apple devices, Swift is a good language to start with. Designers at Apple created this language with beginners in mind. And if your primary goal is to develop mobile apps for iOS devices, this should be your language of choice.

While programmers have created most products since 2014 with Swift, you may also want to learn Objective-C.

Developers created this language in the 1980s. It’s what their team built most iOS tools with. It uses some C syntax, so if you’ve learned C or C++ already, you may want to start with Objective-C as you start learning.

Best for: Anyone aspiring to develop apps for Apple's platforms. Swift's modern features and safety make it a go-to for iOS app development.


50 Free Coding Templates
Free code snippet templates for HTML, CSS, and JavaScript -- Plus access to GitHub.

Navigation Menus & Breadcrumbs Templates
Button Transition Templates
CSS Effects Templates
And more!
Get Your Free Templates
Learn more
Tips for Coding for Beginners
As someone who ventured into the coding world not too long ago, I understand the mixed feelings of excitement and apprehension that come with learning to code. There are many ways to approach the practice of coding, and some methods and languages will work better for you than others.

No matter what or how you learn, however, remember these beginner tips:

1. Be patient.
At the top of this post, I said anyone can learn to code. However, that doesn’t mean it’s easy.

Coding requires you to approach problems in ways you haven’t before. Certain topics may seem nonsensical to you, yet central to the language you’re learning. Problems that might seem easy at first will become far more complex to implement than you expected. You might spend hours hacking away at an assignment without seeing results.

And we can’t forget debugging. You’ll quickly learn that computers are nit-picky and will only do exactly what you tell them. Tiny typos like a missing semicolon or incorrect operator will break your entire program, and you must track down the culprit.

Even coding for beginners isn’t easy.
All of this can be uncomfortable and discouraging, and that’s okay. Do yourself a favor and progress slowly and steadily, giving yourself time to let everything soak in.

The best programmers were once where you are, and everyone has to learn the same things to start. Go easy on yourself, stick to the goals you’ve set, take breaks, and you’ll be fine.

2. Get comfortable with the fundamentals.
The early days of learning a programming language are all about the essentials. You might start by learning binary, data types, and how to print to the console. From there, you’ll explore topics like:

Variables.
Functions.
Conditional logic.
Arrays.
Objects.
It’s essential that you fully grasp each of these concepts before advancing. This is because everything you learn in computer science builds on topics that come before.

If something doesn’t make sense, keep reviewing it until it does. And don’t assume it will make sense later in the context of future lessons. If you’re learning from a tutorial, be sure you understand what each activity is meant to teach you.

Complete all exercises to experience first-hand how each topic applies to coding. And stay patient — you can’t embark on an ambitious project until you grasp the fundamentals.

3. Write clean code from the start.
Here’s something an online course may not teach you: On top of learning how to write your code, you should also practice writing it well.

What does this mean? For any given computation, there will be more than one way to program it. You should always strive to write it in the most concise and humanly readable way that you can.

Developers usually work in teams, so others will be reading your code often. If it’s hard to decipher, fellow developers won’t look forward to working with you.

Even if you decide to freelance, writing clean code ensures you’ll understand your own code. It’s better to build the habit of clean coding now, as it will save you hours trying to decipher your work after you haven’t looked at it in months.

Why is clean code important?
You might be wondering why you need to learn clean code at this point. You’re a beginner, so shouldn’t writing functional programs be the main goal?

Well, yes. This is about establishing good habits early. If you put in the extra work now, you’ll save yourself (and others) some sanity down the road.

A good way to achieve this is by keeping your lines and your functions short. I recommend limiting each line of code to 80 characters max and each function to no more than 15 lines.

While limiting at first, these rules will train you to favor efficient code over the first idea that occurs to you.

Also, make a habit of commenting. Comments are segments of code that aren’t processed by the computer, so you can write whatever you want inside them.

Programmers use comments to clarify the purpose of their code. Learn how comments work in your language and, at the very least, leave comments at the top of your functions explaining the job of each one.

4. Search is your friend.
There’s no shame in using Google to find the solutions to your coding problems. In fact, professional developers do it all the time.

If you’re struggling, someone’s probably been in the same situation and dropped a question to a forum. You’d be surprised at how many solutions you’ll find with super-specific queries.

Plus, it’s quite satisfying to close 20 tabs of Stack Exchange after finally fixing a stubborn bug.

Our Favorite Coding Resources
Coursera
Programming for beginners, Homepage of Coursera

Coursera is an excellent resource in general. They have many programming and coding courses from Google, IBM, as well as various colleges and universities. You can get many paid courses through their monthly subscription, though they have free courses as well.

Coursera also offers financial aid on a per-course basis. If approved, you can get free access to the paid content. It’s worth mentioning that the access granted is only for a limited time through this method. If you don’t touch a course for several months, you will likely lose access.

Another nice thing about Coursera is that it’s treated like a classroom environment. This means you have an instructor for each course that you can ask for help, as well as other students that are currently taking the course. You can also get professional certifications that can help advance or change your career.

MDN Web Docs
Programming for beginners, homepage of MDN Web Docs

If you’re doing web development, MDN Web Docs is the gold standard for documentation. Everything related to HTML, CSS, and JavaScript lives here. This site belongs to the Mozilla Foundation, which you may know for their popular web browser, Firefox.

MDN Web Docs also has many tutorials ranging from complete beginners to the advanced level.

Codecademy
Programming for beginners, Homepage of Codeacademy

Codecademy is great for diving right in and writing code almost immediately. It gives you small digestible tasks to work on, as well as a sandbox to work in. They have courses for just about every language you can imagine.

Most of their content is free, though they have paid guided projects and career paths you can opt for, as well as career services and professional certifications.

The Odin Project
Programming for beginners, Homepage of The Odin Project

The Odin Project is an open-source, full-stack curriculum for web development. They have two paths, one using Ruby on Rails and the other using JavaScript (with the React framework).

The amount of information available is a bit daunting, but the best part about The Odin Project is that you will end up with many real projects to hone your skills and show off to potential employers by the end of it.

W3Schools
Programming for beginners, Homepage of W3schools

W3schools has a ton of tutorials that range from typical programming languages, to frameworks and other languages like SQL and HTML. They also have plenty of example code you can play with and reference during your coding adventures.

The best part is that everything is free. They do have some paid certifications, though all of the actual information about the languages is readily available.

Stack Overflow
Programming for beginners, Homepage of Stackoverflow

Stack Overflow is an incredibly popular and useful site for developers. People ask questions about coding and get feedback. Then, the answers are voted on to determine the best solution. Even when you’re no longer a beginner, you will likely keep returning here to find answers to various questions or issues.

The community is very active, and the public platform is free. You just need to create an account to interact with others.

Coding is more than just the code.
To finish up, I want to share one more valuable piece of advice from my first computer science class. From a beginner’s perspective, it may seem like learning to code means learning how to write code.

This makes sense: When we imagine a computer programmer, we see someone writing out code on a computer — it’s called “coding” after all.

Once you begin, though, you’ll learn that this isn’t the whole story. You’ll spend a lot more time thinking about what to write than actually writing it.

Coding is problem-solving.
This is because coding is more about solving problems than knowing the syntax. Learning to code is learning to think like computers do, deconstruct problems into their components, and address them with the tools you’re given.

So, yes, you’ll learn to write some impressive code and eventually build amazing things. But first, you’ll develop the thinking skills that can get you there.

In my years of coding, this approach to problem-solving has changed how I tackle technical challenges and how I approach problems in general. I hope you’ll experience the same. Keep going. You got this.

Editor's note: This post was originally published in December 2020 and has been updated for comprehensiveness.



Welcome
This is CS50, Harvard University’s introduction to the intellectual enterprises of computer science and the art of programming, for concentrators and non-concentrators alike, with or without prior programming experience. (Two thirds of CS50 students have never taken CS before.) This course teaches you how to solve problems, both with and without code, with an emphasis on correctness, design, and style. Topics include computational thinking, abstraction, algorithms, data structures, and computer science more generally. Problem sets inspired by the arts, humanities, social sciences, and sciences. More than teach you how to program in one language, this course teaches you how to program fundamentally and how to teach yourself new languages ultimately. The course starts with a traditional but omnipresent language called C that underlies today’s newer languages, via which you’ll learn not only about functions, variables, conditionals, loops, and more, but also about how computers themselves work underneath the hood, memory and all. The course then transitions to Python, a higher-level language that you’ll understand all the more because of C. Toward term’s end, the course introduces SQL, via which you can store data in databases, along with HTML, CSS, and JavaScript, via which you can create web and mobile apps alike. Course culminates in a final project.

Watch an introduction
How to Take this Course
Even if you are not a student at Harvard, you are welcome to “take” this course for free via this OpenCourseWare by working your way through the course’s eleven weeks of material. For each week, follow this workflow:

recommended
recommended
Watch Lecture
Watch Section
Submit Problem Set
Watch Shorts
And then submit the course’s final project.

To submit the course’s problem sets and final project for feedback, be sure to create an edX account, if you haven’t already. Ask questions along the way via any of the course’s communities!

If interested in a verified certificate from edX, enroll at cs50.edx.org instead.
If interested in a professional certificate from edX
in web development, enroll at cs50.edx.org/programs/web instead.
in artificial intelligence, enroll at cs50.edx.org/programs/ai instead.
in Python programming, enroll at cs50.edx.org/programs/python instead.
in game development, enroll at cs50.edx.org/programs/games instead.
If interested in transfer credit and accreditation from Harvard Extension School, register at web.dce.harvard.edu/extension/csci/e/50 instead.
If interested in transfer credit and accreditation from Harvard Summer School, register at web.dce.harvard.edu/summer/csci/s/50 instead.


Welcome
This course explores the concepts and algorithms at the foundation of modern artificial intelligence, diving into the ideas that give rise to technologies like game-playing engines, handwriting recognition, and machine translation. Through hands-on projects, students gain exposure to the theory behind graph search algorithms, classification, optimization, machine learning, large language models, and other topics in artificial intelligence as they incorporate them into their own Python programs. By course’s end, students emerge with experience in libraries for machine learning as well as knowledge of artificial intelligence principles that enable them to design intelligent systems of their own.

Prerequisites
CS50x or at least one year of experience with Python.
Watch an introduction
How to Take this Course
Even if you are not a student at Harvard, you are welcome to “take” this course for free via this OpenCourseWare by working your way through the course’s seven weeks of material. For each week, follow this workflow:

Watch Lecture
Submit Project
To submit the course’s projects for feedback, be sure to create an edX account, if you haven’t already. Ask questions along the way via any of the course’s communities!

If interested in a verified certificate from edX, enroll at cs50.edx.org/ai instead.
If interested in a professional certificate from edX, enroll at cs50.edx.org/programs/ai instead.
If interested in transfer credit and accreditation from Harvard Extension School, register at web.dce.harvard.edu/extension/csci/e/80 instead.
If interested in transfer credit and accreditation from Harvard Summer School, register at web.dce.harvard.edu/summer/csci/s/80 instead.

Welcome
This course is a variant of CS50x designed especially for business professionals. Whereas CS50x takes a bottom-up approach, emphasizing mastery of low-level concepts and implementation details thereof, this course takes a top-down approach, emphasizing mastery of high-level concepts and design decisions related thereto. Ultimately this course empowers students to make technological decisions even if not technologists themselves. Topics include cloud computing, networking, privacy, scalability, security, and more, with an emphasis on web and mobile technologies. Students emerge from this course with first-hand appreciation of how it all works and all the more confident in the factors that should guide their decision-making. This course is designed for managers, product managers, founders, and decision-makers more generally.

How to Take this Course
Even if you are not a student at Harvard, you are welcome to “take” this course for free via this OpenCourseWare by working your way through the course’s six weeks of material. For each week, follow this workflow:

Watch Lecture
Submit Assignment
To submit the course’s assignments for feedback, be sure to create an edX account, if you haven’t already. Ask questions along the way via any of the course’s communities!

If interested in a verified certificate from edX, enroll at cs50.edx.org/business instead.
If interested in transfer credit and accreditation from Harvard Extension School, register at web.dce.harvard.edu/extension/csci/e/1b instead.
If interested in transfer credit and accreditation from Harvard Summer School, register at web.dce.harvard.edu/summer/csci/s/1b instead.

Welcome
An introduction to cybersecurity for technical and non-technical audiences alike. Learn how to secure your accounts, data, systems, and software against today’s threats and how to recognize and evaluate tomorrow’s as well, both at home and at work. Learn how to preserve your own privacy. Learn to view cybersecurity not in absolute terms but relative, a function of risks and rewards (for an adversary) and costs and benefits (for you). Learn to recognize cybersecurity as a trade-off with usability itself. Course presents both high-level and low-level examples of threats, providing students with all they need know technically to understand both. Assignments inspired by real-world events.

Watch an introduction
How to Take this Course
Even if you are not a student at Harvard, you are welcome to “take” this course for free via this OpenCourseWare by working your way through the course’s five weeks of material. For each week, follow this workflow:

Watch Lecture
Submit Assignment
And then submit the course’s final project.

To submit the course’s assignments and final project for feedback, be sure to create an edX account, if you haven’t already. Ask questions along the way via any of the course’s communities!

If interested in a verified certificate from edX, enroll at cs50.edx.org/cybersecurity instead.
If interested in transfer credit and accreditation from Harvard Extension School, register at web.dce.harvard.edu/extension/csci/e/159 instead.
If interested in transfer credit and accreditation from Harvard Summer School, register at web.dce.harvard.edu/summer/csci/s/159 instead.

Welcome
An introduction to programming using a language called Python. Learn how to read and write code as well as how to test and “debug” it. Designed for students with or without prior programming experience who’d like to learn Python specifically. Learn about functions, arguments, and return values (oh my!); variables and types; conditionals and Boolean expressions; and loops. Learn how to handle exceptions, find and fix bugs, and write unit tests; use third-party libraries; validate and extract data with regular expressions; model real-world entities with classes, objects, methods, and properties; and read and write files. Hands-on opportunities for lots of practice. Exercises inspired by real-world programming problems. No software required except for a web browser, or you can write code on your own PC or Mac.

Whereas CS50x itself focuses on computer science more generally as well as programming with C, Python, SQL, and JavaScript, this course, aka CS50P, is entirely focused on programming with Python. You can take CS50P before CS50x, during CS50x, or after CS50x. But for an introduction to computer science itself, you should still take CS50x!

Watch an introduction
How to Take this Course
Even if you are not a student at Harvard, you are welcome to “take” this course for free via this OpenCourseWare by working your way through the course’s ten weeks of material. For each week, follow this workflow:

recommended
Watch Lecture
Watch Shorts
Submit Problem Set
And then submit the course’s final project.

To submit the course’s problem sets and final project for feedback, be sure to create an edX account, if you haven’t already. Ask questions along the way via any of the course’s communities!

If interested in a verified certificate from edX, enroll at cs50.edx.org/python instead.
If interested in a professional certificate from edX, enroll at cs50.edx.org/programs/python (for Python) or cs50.edx.org/programs/data (for Data Science) instead.

Welcome
This is CS50’s introduction to databases using a language called SQL. Learn how to create, read, update, and delete data with relational databases, which store data in rows and columns. Learn how to model real-world entities and relationships among them using tables with appropriate types, triggers, and constraints. Learn how to normalize data to eliminate redundancies and reduce potential for errors. Learn how to join tables together using primary and foreign keys. Learn how to automate searches with views and expedite searches with indexes. Learn how to connect SQL with other languages like Python and Java. Course begins with SQLite for portability’s sake and ends with introductions to PostgreSQL and MySQL for scalability’s sake as well. Assignments inspired by real-world datasets.

Whereas CS50x itself focuses on computer science more generally as well as programming with C, Python, SQL, and JavaScript, this course, aka CS50 SQL, is entirely focused on SQL. You can take CS50 SQL before CS50x, during CS50x, or after CS50x. But for an introduction to computer science itself, you should still take CS50x!

Watch an introduction
How to Take this Course
Even if you are not a student at Harvard, you are welcome to “take” this course for free via this OpenCourseWare by working your way through the course’s seven weeks of material. For each week, follow this workflow:

Watch Lecture
Submit Problem Set
And then submit the course’s final project.

To submit the course’s problem sets and final project for feedback, be sure to create an edX account, if you haven’t already. Ask questions along the way via any of the course’s communities!

If interested in a verified certificate from edX, enroll at cs50.edx.org/sql instead.
If interested in a professional certificate from edX, enroll at cs50.edx.org/programs/databases instead.
If interested in transfer credit and accreditation from Harvard Extension School, register at web.dce.harvard.edu/extension/csci/e/151 instead.

Welcome
This course picks up where CS50x leaves off, diving more deeply into the design and implementation of web apps with Python, JavaScript, and SQL using frameworks like Django, React, and Bootstrap. Topics include database design, scalability, security, and user experience. Through hands-on projects, students learn to write and use APIs, create interactive UIs, and leverage cloud services like GitHub and Heroku. By semester’s end, students emerge with knowledge and experience in principles, languages, and tools that empower them to design and deploy applications on the Internet.

Prerequisites
CS50x or prior experience in any programming language.
Watch an introduction
How to Take this Course
Even if you are not a student at Harvard, you are welcome to “take” this course for free via this OpenCourseWare by working your way through the course’s nine weeks of material. For each week, follow this workflow:

Watch Lecture
Submit Project
And then submit the course’s final project.

To submit the course’s projects and final project for feedback, be sure to create an edX account, if you haven’t already. Ask questions along the way via any of the course’s communities!

If interested in a verified certificate from edX, enroll at cs50.edx.org/web instead.
If interested in a professional certificate from edX, enroll at cs50.edx.org/programs/web instead.
If interested in transfer credit and accreditation from Harvard Extension School, register at web.dce.harvard.edu/extension/csci/e/33a instead.
If interested in transfer credit and accreditation from Harvard Summer School, register at web.dce.harvard.edu/summer/csci/s/33a instead.

The Only ML Roadmap, that you will ever need!
So, you want to dive deep into Machine Learning and do something in the field of Artificial Intelligence but don't know where to begin. You have come to the right place! I would be putting out everything that I know and things that I feel you need to know to get into any kind of data role. This document would also help you explore every broad data role and might help you decide what you should be doing.

Is ML and Data Science for you?
Before you dive in any deeper. I guess it makes sense to understand if you should even pursue this field. I would jot down a few points and if it matches your personality, then you should definitely give it a shot!

You love mathematics (or atleast you don't hate it).
You like looking at percentages, statistical data and would love to create such insights if given a chance.
You have an eye for patterns and you figure out interesting details that most people might miss.
You don't get scared of large excel sheets and would be okay to clean them to work on cool projects with the cleaned data.
You are a good communicator, or you are comfortable with communicating your ideas and findings to people around you (SUPER IMPORTANT).
You are okay with not finding the right answer and have accepted that you will never find one. Your job would be to get as close to the correct answer as possible but it's okay if you don't reach it.
You like brainstorming about things and can tolerate working with vague problem statements and figure out what to do.
It is absolutely fine if all the points do not match the person you are, but if most of them make sense then you should continue reading further.

The paths to choose from
If you are still reading, I believe you want to give a chance to data science and Machine Learning. In this section, I would talk about the paths which you can choose from. Follow the table below, to get a basic idea.

Role	What do they do?
Data Analyst	Analyze data provided to them to generate insights. Present their findings using visualization tools and PPTs.
Data Engineer	The data which data analysts work with doesn't come easily. The ones who work hard to create data pipelines to bring the data to the table are data engineers.
Machine Learning Engineer	Data analysts provide insights of the data based on what happened in the past. The ones who build predictive models to forecast the future using the present data are machine learning engineers
MLOps Engineer	Building a model doesn't mean that the model would perform well all the time. every model degrades with time. The ones who look after the deployment of the model and maintain it's performance are MLOps engineers.
Data Scientist	The one who has the ability to handle most of the above mentioned roles has the potential to be a data scientist. They are also more inclined towards doing mathematical and statistical research to improve model performance
AI Researcher	A data scientist who focuses more on maths and statistics. Focuses less on data engineering but puts a lot of effort to read about the recent advancements in the field of AI and tries to build better and more sophisticated algorithms. They are more often than not in specialized fields like Computer Vision (image related tasks), Natural Language processing (text related tasks), speech recognition, etc.
What to learn?
Now that you are aware of the types of roles that are present in the data realm, you might want to know how to get started and what you need to learn for each role.

Data Analyst
A skilled data analyst has

strong communication skills
good presentation skills and ability to explain visualizations
Proficiency in SQL
Proficiency in data visualization tools
Proficiency in Python (optional but recommended)
So to be a data analyst, the primary skill you need is SQL. There's no substitute of SQL, so prepare this well. There are multiple resources to learn SQL There is this amazing playlist from campusX to learn SQL. You should also check out Joey Blue who has done exceptional work as well. Practice Questions from Data Lemur after you learn SQL and you are good to go. You need to learn a data visualization tool like Power BI or Tableau. I personally prefer Power BI. There's an amazing course by Codebasics to learn Power BI. The link is attached here. In case, you want to learn python, you need to learn the fundamentals and a few libraries like Numpy, Pandas and matplotlib/seaborn (I prefer matplotlib). FreeCodeCamp is an youtube channel that provides enormous amount of knowledge for free! There's a 12 hour long video that teaches you how to install python even if you have never done any programming and it also makes you learn about these above-mentioned libraries.

Finally, I would also ask you to do something that most people ignore. LEARN ADVANCED EXCEL. You might feel, you know how to use Excel, I promise you that you don't. There are so many ways that excel can simplify your life, it's just amazing. Check out this playlist from freecodecamp where they teach you excel from basics and progressively teach you the advanced concepts.

If youtube is not for you and you require structured online courses, I have a few suggestions as well.

Google Data Analytics Professional Certificate
Google Business Intelligence Professional Certificate
Google Advanced Data Analytics
Try to do it in the mentioned order. Coursera offers financial aid, so you can do all three of the above mentioned courses for FREE.

Data Engineer
I would be honest here, the purpose of this roadmap is to make you guys aware of all the roles present in the data industry. I am not pursuing Data Engineering, so I am not the right person to advise you about this. yet there are things that I can tell you about data engineering. It is mostly for people who are very efficient programmers. Infact, I would say, data engineering is one of the most programmatically heavy roles out of all the above-mentioned roles. Yet, if you are someone who would prefer to code more than talking to people, then data engineering is something that you might like.

A few tools that data engineers use are:

SQL
Python
Scala
Hadoop/Spark/Kafka for handling big data
Apache Nifi and Apache Airflow for building ETL pipelines
Snowflake/Google Big Query, etc for data warehousing
Familiarity with Cloud Systems like GCP/AWS
Familiarity with containerization technologies like Docker and Kubernetes.
I am sorry but since I don't have much experience with data engineering technologies, I can't help here. Yet, you can google and find resources in this field that you deem useful. I have a better option though in the opportunities section down below.

Machine Learning Engineer
If you made it here. I hope you like maths. Data Analytics was communication heavy and Data Engineering was programming heavy. The roles that you would be seeing now are all mathematics and statistics heavy. This shouldn't scare you but you need to learn a bit of Linear Algebra, Calculus and Probability to do well in these fields, to properly understand how things work. Let's dive deep into it.

If you are a Machine Learning Engineer, you probably would have your data prepared by a team of data engineers. Depending on the size of the company, it would be either analyzed by data analysts or in a small company, you would have to analyze the data before working on your machine learning models. So, to be well prepared, you need to already have the necessary data analyst skills (you can leave out the dashboarding aspects but it's good to know to keep your options open). The extra skills that a machine learning engineer has other than just having data analysis skills are:

Solid foundations of linear algebra, probability statistics and calculus.
Knowledge of some other python libraries like Scikit learn, beautiful_soup/spacy, etc.
Knowledge of frameworks like tensorflow/pytorch.
Understanding of Standard Machine Learning Algorithms like Linear Regression, Logistic Regression, K nearest Neighbors, Support Vector Machine, Decision tree, Random Forest, Gaussian Naive Bayes, etc.
Understanding of concepts like gradient descent, multi-layer perceptrons, feed-forward neural networks, back propagation, etc. to build the base for understanding deep learning.
Knowing how to deploy your projects using Streamlit (if possible learn Flask too).
Learning about specialized fields like Computer Vision and Natural Language Processing (optional).
There are a lot of free courses available on the internet related to Machine Learning. I would tell you guys to look at the ones that I feel the most important and have actually helped me learn.

Machine Learning Specialization by Andrew Ng
Deep Learning Specialization by Andrew Ng
Data Science Playlist by Codebasics
If you like reading books, you can try reading:

Python Machine Learning: Machine Learning and Deep Learning with Python, scikit-learn, and TensorFlow 2 by Sebastian Raschka Vahid Mirjalili
Hands-On Machine Learning with Scikit-Learn and TensorFlow: Concepts, Tools, and Techniques to Build Intelligent Systems
For Mathematics and Statistics you can read:

Practical Statistics for Data Scientists (Oreilly)
Mathematics of Machine Learning by Martin Lotz
CS229 Lecture Notes Andrew Ng and Tengyu Ma (this is much more than notes trust me.)
For Advanced Readers out there:

Approaching (Almost) Any Machine Learning Problem by Abhishek Thakur
The Black Swan: The Impact of the Highly Improbable (you can easily go ahead without reading this but this is one of the greatest books that I have ever read).
For the ones who want to dive deep into Computer Vision and NLP:

For NLP, you should follow Pradip Nichite. He is one of my personal favourites.
For Computer Vision, You should follow Nicholas Renotte. He has also done work in NLP as well but his tutorials on Motion Sensing are amazing.
For an all rounder, you can follow Rob Mulla.
MLOps Engineer
This is another field that I have very low idea about and hence I won't be talking much about it. Yet, in layman's terms, MLOps Engineer = Devops Engineer who understands ML

You can follow Ayush Singh (I know he's amazing, just don't feel you haven't done anything in your life. You weren't aware. Now you are). Also, be aware that this role is also very programmatically heavy but requires lower communication skills compared to other roles. You can look at the MLOps roadmap by Marvelous MLOps which I feel is a good place to start. That's all that I can help you guys with here. You would find something interesting in the opportunities section below.

Data Scientist
If you're reading this, then know that this role prefers candidates with a masters. Although there is a probability that you can get hired as a data scientist right after your undergraduate degree but the chances are extremely slim. Read Further, only if you wish to go for a master's (if not a PhD). To become a data scientist you need to understand the image below.

Data Science Venn Diagram

To be a data scientist you need to:

Know python and machine learning.
Understand statistics and mathematics
Have domain specific knowledge.
Data Scientists use data to help companies make decisions that have a direct impact. So being comfortable with hypothesis testing and performing statistical tests to check if your decisions are correct would be important.

As mentioned above, this isn't an entry level role and requires expertise. So the best you could do is try to get expertise in mathematical and statistical concepts that are important to data science. The books presented above in Machine Learning would help you with that.

AI Researcher
I consider this to be the top role in the field of AI and machine learning. The ones who are in this role definitely have a masters and in most cases, a PhD. You need to have publications in top conferences and a lot of interest in research to actually get to this position. The data scientists use algorithms to solve problems. AI Researchers are the ones who study the underlying mathematics of these algorithms and try to improve them. This is very technical and is only for ones who want to study and dissect the field of Artificial intelligence. This is where I want to reach. I hope some of you guys do as well. It is very academically heavy and is easily the most mathematical. Yet, if you are very interested in solving mathematical problems and proving theorems, this could be for you.

What Next?
Thank you for reading this far! I hope you have got an idea of all the major roles that exist and have a vague idea of what you want to pursue. Now, to get a job in the data industry, you need to stand out from the rest. For that you need to have a portfolio website.

A portfolio website consists of all the projects that you have built and helps the recruiter figure out what you are good at in a few seconds. The resources mentioned above already have a lot of guided projects that you can mention in your resume but other than that you can also do a few projects on the side to help you out.

Opportunities
I talked about portfolio website but I did not mention how you can do projects of your own. For that there's a platform that comes to your rescue. It's called Kaggle. Here you would find thousands of datasets to practice your data analysis/machine learning skills to work on and there are also experienced people sharing their code that could help you learn the best practices (What more do you need?).

Hackathons
Showcasing that you have experience to build an end to end solution in a small time is very attractive to potential employers. There are multiple websites where you can find Data Science/Machine Learning related hackathons. I would name a few:

Kaggle
MachineHack
Unstop
Keep checking these websites on a timely basis as new opportunities can come up any time. Stay aware. Knowing about opportunities is a gift that people take for granted.

Special mentions
There are a few opportunities that I would like to talk about which do not fit the above mentioned criterias but could be helpful.

AWS AI & ML Scholarship: This is a 20 hour long course that you need to take. After which you have to give an exam and score 80% to be eligible to apply. The top 2000 students who apply get a 4 month long nanodegree course about Python programming and AI on Udacity by AWS (worth $4000) for FREE. The top 500 who do well in that course get another advanced nanodegree program for free and receive guidance from AWS Mentors for a year. The last date to complete your application after completing all the tests and course work is 30th September, 2023. BE QUICK!
Hamoye: This one is for the Data Engineering Enthusiasts and MLOps Enthusiasts. I asked you to scroll to the opportunities section for this. Hamoye is an excellent platform that offers students the chance to study in a competitive environment. They offer you four tracks to choose from:
Data Science
Data Engineering
Cloud Engineering and Devops
Data Storytelling
You would be in a 4 month long internship here where you would have to submit weekly quizzes and assignments to get a rank among every other student who applied for the internship. The best performers tend to get internship opportunities (and even if you don't, you would have learnt a lot, made projects to showcase and would have a leaderboard position to flex about ). The last date to apply to the fall cohort 2023 is 8th September, 2023. Be QUICKER!!!

Omdena: You have built some projects and have some experience to contribute to projects that actually make an impact. Omdena could help you with that. They offer you a chance to work with people from all around the world for 6-8 weeks where you try to solve a real world problem and make an impact. The project actually gets implemented in the real world and is a very solid add to your resume. Projects on omdena are open all around the year and you can apply whenever you feel ready.
Conclusion
Whoa, this was long, Thanks for reading this far. I would admit that I am not an experienced professional and I am still learning but this is everything that I had used (or still am using) to improve myself. I believe all these resources could help you all as well. If you feel there's something that you don't agree with or want to contribute something that I missed out. Feel free to raise a PR. I hope this helps some of you!

To become a Web Developer, you should have an understanding of HTML, CSS, and JavaScript. It’s also recommended to learn about CSS and CSS frameworks. Developing these fundamental web development skills will give you the foundation and logic for communicating with programming languages.

How to become a Web Developer in five steps:

Learn web development fundamentals
Choose a development specialization
Learn key programming languages for web development
Work on projects to develop your Web Developer skills
Build a web development portfolio
1. Learn Web Development Fundamentals
The best first step to becoming a Web Developer is to start learning web development fundamentals, including an understanding of HTML (Hypertext Markup Language), CSS (Cascading Style Sheets), and JavaScript.

Many aspiring Web Developers are now using coding bootcamps to fast-track the learning process. Coding bootcamps have thrived because they are short, immersive, and focused on outcomes and employment – their goal is to develop job-ready skills as efficiently as possible, making them an increasingly worthwhile investment for a would-be Web Developer. According to the job site Indeed, four out of five companies in the U.S. have hired a graduate from a coding bootcamp.

In fact, the practical advantages of coding bootcamps are only getting clearer over time. For one thing, the field of web development naturally attracts people from all other fields, many of them making mid-career transitions – people for whom a clear and efficient path to skills expansion is a top priority. Further, employers increasingly value skills and experience over education, placing anyone who can prove their abilities on more equal footing with Developers holding a college degree.

It’s important to note that Web Developers – more than most other fields – must be committed to ongoing learning to stay on top of changes in web development and programming languages, tools, and trends. This makes mid-career retraining a must whether or not it’s the line of work you started out in.